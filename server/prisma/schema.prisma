generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  name           String
  email          String     @unique
  password       String
  profilePicture String?
  isActive       Boolean    @default(true)
  lastLogin      DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Workspace      Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId    String?
  Project        Project[]
  TaskCreated    Task[]     @relation("TaskCreatedBy")
  TaskAssigned   Task[]     @relation("TaskAssignedTo")
  Member         Member[]
  Account        Account[]
}

model Account {
  id           String       @id @default(cuid())
  User         User         @relation(fields: [userId], references: [id])
  userId       String
  provider     ProviderEnum
  providerId   String       @unique
  refreshToken String?
  tokenExpiry  DateTime?
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  description String?
  inviteCode  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  User        User[]
  Project     Project[]
  Task        Task[]
  Member      Member[]
}

model Project {
  id          String    @id @default(cuid())
  name        String
  emoji       String    @default("ðŸ“Š")
  description String?
  Workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  CreatedBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  CreatedAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Task        Task[]
}

model Task {
  id           String           @id @default(cuid())
  taskCode     String
  title        String
  description  String?
  Project      Project          @relation(fields: [projectId], references: [id])
  projectId    String
  Workspace    Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  AssignedTo   User             @relation("TaskAssignedTo", fields: [assignedToId], references: [id])
  assignedToId String
  CreatedBy    User             @relation("TaskCreatedBy", fields: [createdById], references: [id])
  createdById  String
  status       TaskStatusEnum   @default(TODO)
  priority     TaskPriorityEnum @default(MEDIUM)
  dueDate      DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Member {
  id          String    @id @default(cuid())
  User        User      @relation(fields: [userId], references: [id])
  userId      String
  Workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  Role        Role      @relation(fields: [roleId], references: [id])
  roleId      String
  joinedAt    DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Role {
  id         String       @id @default(cuid())
  name       RoleTypeEnum @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Permission Permission[] @relation("RolePermissions")
  Member     Member[]
}

model Permission {
  id   String             @id @default(cuid())
  type PermissionTypeEnum @unique
  Role Role[]             @relation("RolePermissions")
}

enum RoleTypeEnum {
  OWNER
  ADMIN
  MEMBER
}

enum PermissionTypeEnum {
  READ
  WRITE
  DELETE
  UPDATE
}

enum TaskStatusEnum {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriorityEnum {
  LOW
  MEDIUM
  HIGH
}

enum ProviderEnum {
  GOOGLE
  EMAIL
}
